name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CFLAGS_BASE: "-Wall -Wextra -std=c99"

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang-tidy \
          clang \
          libasound2-dev \
          libx11-dev \
          libxrandr-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libxcursor-dev \
          libxinerama-dev \
          cmake \
          git \
          wget
    
    - name: Install LLVM 21 for consistent clang-format
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        echo "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-21 main" | sudo tee /etc/apt/sources.list.d/llvm.list
        sudo apt-get update
        sudo apt-get install -y clang-format-21
        sudo ln -sf /usr/bin/clang-format-21 /usr/bin/clang-format
    
    - name: Cache Raylib build
      id: cache-raylib
      uses: actions/cache@v4
      with:
        path: |
          /usr/local/include/raylib.h
          /usr/local/include/raymath.h
          /usr/local/include/rlgl.h
          /usr/local/lib/libraylib.a
          /usr/local/lib/pkgconfig/raylib.pc
        key: ${{ runner.os }}-raylib-5.5-${{ hashFiles('.github/workflows/ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-raylib-5.5-
          ${{ runner.os }}-raylib-
    
    - name: Build and install Raylib
      if: steps.cache-raylib.outputs.cache-hit != 'true'
      run: |
        git clone --depth 1 --branch 5.5 https://github.com/raysan5/raylib.git
        cd raylib
        mkdir build && cd build
        cmake -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release ..
        make -j$(nproc)
        sudo make install
        sudo ldconfig
    
    - name: Update library cache (if Raylib was cached)
      if: steps.cache-raylib.outputs.cache-hit == 'true'
      run: sudo ldconfig
    
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          src/*.o
          tower_defense
        key: ${{ runner.os }}-build-${{ hashFiles('src/*.c', 'src/*.h', 'Makefile') }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Check code formatting
      run: |
        echo "Checking code formatting..."
        if ! clang-format --dry-run --Werror src/*.c src/*.h; then
          echo "❌ Code formatting check failed"
          echo "Run 'make format' to fix formatting issues"
          exit 1
        fi
        echo "✅ Code formatting check passed"
    
    - name: Build project
      run: |
        echo "Building project..."
        make clean
        if ! make CFLAGS="-Wall -Wextra -std=c99 -O2" LIBS="-lraylib -lm"; then
          echo "❌ Build failed"
          exit 1
        fi
        echo "✅ Build successful"
    
    - name: Run static analysis
      run: |
        echo "Running static analysis..."
        if ! clang --analyze $CFLAGS_BASE -O2 src/*.c; then
          echo "⚠️ Static analysis found issues"
        else
          echo "✅ Static analysis passed"
        fi
    
    - name: Run linter
      run: |
        echo "Running linter..."
        if ! clang-tidy src/*.c -- $CFLAGS_BASE; then
          echo "⚠️ Linter found issues (non-blocking)"
        else
          echo "✅ Linting passed"
        fi
      continue-on-error: true
    
    - name: Test build configurations
      run: |
        echo "Testing debug build..."
        make clean
        make debug CFLAGS="-Wall -Wextra -std=c99 -g -DDEBUG" LIBS="-lraylib -lm"
        echo "✅ Debug build successful"
        
        echo "Testing release build..."
        make clean  
        make release CFLAGS="-Wall -Wextra -std=c99 -O3 -DNDEBUG" LIBS="-lraylib -lm"
        echo "✅ Release build successful"
    
    - name: Verify CI script works
      run: |
        chmod +x scripts/ci-check.sh
        echo "Running local CI script for comparison..."
        ./scripts/ci-check.sh || echo "⚠️ Local CI script has different behavior"